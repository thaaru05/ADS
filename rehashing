class HashTable:
    def __init__(self, initial_capacity=8):
        self.capacity = initial_capacity
        self.size = 0
        self.table = [None] * self.capacity

    def _hash(self, key):
        return hash(key) % self.capacity

    def _probe(self, key):
        index = self._hash(key)
        while self.table[index] is not None and self.table[index][0] != key:
            index = (index + 1) % self.capacity
        return index

    def _rehash(self):
        old_table = self.table
        self.capacity *= 2
        self.table = [None] * self.capacity
        self.size = 0
        
        for item in old_table:
            if item is not None:
                self._insert_no_rehash(item[0], item[1])

    def _insert_no_rehash(self, key, value):
        index = self._probe(key)
        if self.table[index] is None:
            self.size += 1
        self.table[index] = (key, value)

    def insert(self, key, value):
        if self.size >= self.capacity // 2:
            self._rehash()
        self._insert_no_rehash(key, value)

    def get(self, key):
        index = self._probe(key)
        if self.table[index] is None:
            return None
        return self.table[index][1]

    def delete(self, key):
        index = self._probe(key)
        if self.table[index] is None:
            return None
        value = self.table[index][1]
        self.table[index] = None
        self.size -= 1
        return value

# Example usage
hash_table = HashTable()

hash_table.insert("key1", "value1")
hash_table.insert("key2", "value2")
hash_table.insert("key3", "value3")

print(hash_table.get("key1"))  # Output: value1
print(hash_table.get("key2"))  # Output: value2

hash_table.insert("key4", "value4")
hash_table.insert("key5", "value5")
hash_table.insert("key6", "value6")
hash_table.insert("key7", "value7")
hash_table.insert("key8", "value8")  # This should trigger rehashing

print(hash_table.get("key1"))  # Output: value1
print(hash_table.get("key8"))  # Output: value8
